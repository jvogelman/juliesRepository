<?php
require_once 'enums.php';

?>


<script type="text/javascript">

QuestionCategory = {
	MultipleChoiceOneAnswer : 1,
	MultipleChoiceMultipleAnswers : 2,
	CommentEssayBox : 3,
	DescriptiveText : 4,
	MatrixOfChoices : 5,
	MatrixOfChoicesChild : 6
		
}

String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
};

/*
	function fitToScreen(dialog) {
		var extra = 40;
		var dWidth = $(dialog).width();
		var dHeight = $(dialog).height();
		if (this.width - extra < dWidth) {
			$(dialog).css('width', this.width - extra);
		}
		if (this.height - extra < dHeight) {
			$(dialog).css('height', this.height - extra);
		}
	}*/
	
	var editQuestionDialog = $('<div id="editQuestionDialog"></div>')
	.html('<p>Edit Question</p>')
	.dialog({
		autoOpen: false,
		//title: 'Edit Question',
		modal: true,
		//width:'auto'
		width: 700,
		//height: window.innerHeight - 50,
		height: 'auto'


		/// recommended but it doesn't work:
		/*autoOpen: false,
        resizable: false,
        modal: true,
        width:'auto'*/
	});
	
	// this is for the MatrixOfChoices edit dialog
	var updateChoicesDialog = $('<div id="updateChoicesDialog"></div>')
		.html('<p>Adjust the choices below (one per line)<br/><textarea id="updateChoicesTextArea" rows="10" cols="25"></textarea>' +
		'<br/><button id="updateChoicesUpdate">Update</button><button id="updateChoicesCancel">Cancel</button></p>')
		.dialog({
			autoOpen: false,
			title: 'Update Choices',
			modal: true,
			width:'auto',
			height: 'auto'
		});

	function setupEditQuestionDialog(surveyId){
		
		//editQuestionDialog.dialog('option', 'position', 'center');    
		 
		var type = parseInt($('#questionType').val());
		switch(type) {
		case QuestionCategory.MultipleChoiceOneAnswer:
		case QuestionCategory.MultipleChoiceMultipleAnswers:
			setupMultipleChoiceDialog();
			break;
		case QuestionCategory.CommentEssayBox:
	    	setupEssayBoxDialog();
			break;
		case QuestionCategory.DescriptiveText:
	    	setupDescriptiveTextDialog();
			break;
		case QuestionCategory.MatrixOfChoices:
	    	setupMatrixOfChoicesDialog();
			break;
		}
		

    	var questionId = $('#hiddenQuestionId').val();

    	// set css for the elements in the form
    	$('.zendFormElement').css({'font-size': 'medium', 'margin': '1px'});
    	$('button').css({'font-size': 'small'});
    	$('#save').css({'font-size': 'small'});

    	// fix the height of the dialog: if the dialog's too big, make sure it doesn't extend too far down
    	var dialogHeight = parseInt($(editQuestionDialog).css('height'), 10);
    	if (dialogHeight > window.innerHeight - 50) {
        	editQuestionDialog.dialog('option', 'height', window.innerHeight - 50);
    	} else {
        	editQuestionDialog.dialog('option', 'height', 'auto');
        	dialogHeight = parseInt($(editQuestionDialog).css('height'), 10);
        	if (dialogHeight > window.innerHeight - 50) {
            	editQuestionDialog.dialog('option', 'height', window.innerHeight - 50);
        	}
    	}


    	editQuestionDialog.dialog('option', 'position','top');    

		
    	// what if the Question Category changes?
    	$('#questionType').change( function(){
        	$.post('/owner/question/shownewcategory',
                	{'questionId' : questionId, 'surveyId' : surveyId, 'newCategory' : $('#questionType').val(), 'description' : $('#question').val() },
                    function (response) {
                		if (response.substr(0,5) == "ERROR") {
                           	alert("Error: " + response.substr(6));
                        } else {
                        	editQuestionDialog.html(response);

                        	unbindEditQuestionDialog();
                        	unbindMultipleChoiceDialog();
                        	unbindMatrixOfChoicesDialog();

                        	setupEditQuestionDialog(surveyId);
                        }
	                }
    		)
    	});

    	// validate user input on submit
    	$(this).submit( function(e){
        	if ($('#questionType').val() == -1) {
            	alert('Please select a Question type first');
            	e.preventDefault();
            	return;
        	}
        	if ($('#question').val() == '') {
            	alert('Please enter a description for the Question first');
            	e.preventDefault();
            	return;
        	}

    		unbindEditQuestionDialog();
    	});

    	$('#cancel').click( function() {
    		unbindEditQuestionDialog();
    	});
	}

	function unbindEditQuestionDialog() {
		$('#questionType').unbind('change');
		$(this).unbind('submit');
	}
	
	function setupSelection(element, index){
		var letterA = 'a';
    	var selectionLetter = String.fromCharCode(letterA.charCodeAt(0) + index - 1);
    	
		$(element).prev()
			.attr('for', 'selection-' + index)
			.html(selectionLetter + '.');
		$(element)
			.attr('name', 'selection[' + index + ']')
			.attr('id', 'selection-' + index);
	}

	function setupMultipleChoiceDialog(){
		$('#fieldset-selection').append('<button id="addSelectionButton">Add</button>');

		$('#fieldset-selection p').append('<button class="deleteSelectionButton">Delete</button>');

		$('button').css({'font-size': 'small'});
		
    	$('#addSelectionButton').click(function(event) {
        	event.preventDefault();
        	var selectionIndex = $('.selection').size() + 1;
        	//var letterA = 'a';
        	//var selectionLetter = String.fromCharCode(letterA.charCodeAt(0) + selectionIndex - 1);
			
        	var currentLast = $('.selection:last').closest('p');
			var newP = currentLast.clone();
			
			$(newP).hide();
			$(newP).fadeIn('slow');
			currentLast.after(newP);
			
			setupSelection('.selection:last', selectionIndex);
			$('.selection:last').val('');
    	});
    	
    	$('.deleteSelectionButton').live('click', function(event) {
        	event.preventDefault();

        	// remove all html within and including the <p></p> tags
			var parent = $(this).parent('p');
			$(this).parent('p').fadeOut('slow');
			$(this).parent('p').remove();

			$('#fieldset-selection .selection').each(function(index) {
				setupSelection(this, index + 1);
				index++;
			});
        	
    	});

    	if ($('#otherField').attr('checked') != "checked") {
    		$('#otherFieldSize').attr('disabled', 'disabled');
    	}

    	$('#otherField').click(function(){
    		if ($('#otherField').attr('checked') != "checked") {
        		$('#otherFieldSize').attr('disabled', 'disabled');
        	} else {
        		$('#otherFieldSize').removeAttr('disabled');
        	}
    	});

    	$(this).submit(function(e) {
			// make sure user has entered at least one selection
			var selectionEntered = false;

			$('#fieldset-selection .selection').each(function(index) {
				var selection = $(this).val().trim();
				if (selection != '') {
					selectionEntered = true;
				}
			});
			
			if (!selectionEntered) {
				alert('Please enter at least one selection');
				e.preventDefault();
				return;
			}

			unbindMultipleChoiceDialog();
    	});


    	$('#cancel').click( function() {
    		unbindMultipleChoiceDialog();
    	});
	}

	function unbindMultipleChoiceDialog() {
		$('#addSelectionButton').unbind('click');
		$('.deleteSelectionButton').unbind('click');
		$('#otherField').unbind('click');
		$(this).unbind('submit');
	}


	function setupEssayBoxDialog(){
	}

	function setupDescriptiveTextDialog(){
	}

	function setupMatrixOfChoicesDialog(){
    	//$('#editRow').css({'font-size': 'small'});
    	$('#updateChoicesRow').css({'font-size': 'small'});
    	//$('#editColumn').css({'font-size': 'small'});
    	$('#updateChoicesColumn').css({'font-size': 'small'});
    	
    	/*var editChoicesDialog  = $('<div id="editChoicesDialog"></div>')
		.html('<p>Enter the new text for this choice:<br><input type="text" size="50" id="editChoicesInput"/>' +
				'<br/><button id="editChoicesCancel">Cancel</button><button id="editChoicesUpdate">Update</button></p>')
		.dialog({
			autoOpen: false,
			title: 'Edit Choice',
			modal: true,
			width:'auto',
			height: 'auto'
		});


    	$('#editRow').click(function() {
        	editChoices('#rowChoices');
    	});
    	$('#editColumn').click(function() {
        	editChoices('#columnChoices');
    	});*/
    	$('#updateChoicesRow').click(function() {
        	updateChoices('#rowChoices', '#hiddenRowChoices');
    	});
    	$('#updateChoicesColumn').click(function() {
        	updateChoices('#columnChoices', '#hiddenColumnChoices');
    	});

    	function updateChoices(select, hidden) {
			updateChoicesDialog.dialog('open');
			$('#updateChoicesTextArea').val('');
			
			// enter the current choices in the text area
			$(select + ' option').each(function () {
				var newText = $('#updateChoicesTextArea').val() + this.text + '\n';
				$('#updateChoicesTextArea').val(newText);
			}); 
			
    		// set the Cancel button to close the dialog
    		$('#updateChoicesCancel').click(function(){
    			$('#updateChoicesUpdate').unbind('click');
    			$('#updateChoicesCancel').unbind('click');
    			updateChoicesDialog.dialog('close');
    		});  		
    		
    		// if Update button is clicked...
    		$('#updateChoicesUpdate').click(function(){
				
				// empty the Select and the hidden tag
        		$(select).empty();
        		$(hidden).val('');

        		// separate the text area by line feed to get each option and add it to the select  		
				var str = $('#updateChoicesTextArea').val();
        		
				var i = str.indexOf('\n');
				var index = 1;
				while (i != -1) {
					var val = str.substr(0, i);
					$.trim(val);
					if (val != '') {
						$(select).append($("<option></option>")
	        				.attr("value", index).text(val));
        				var hiddenVal = $(hidden).val();
        				$(hidden).val(hiddenVal + /*index + ',' + */ val + ',');
					}
    		     	
					if (i == str.length - 1) {
						str = '';
						break;
					}
					str = str.substr(i + 1);
					i = str.indexOf('\n');
					index++;
				}
				// if there's anything remaining, add it to the select as well
				$.trim(str);
				if (str != '') {
					$(select).append($("<option></option>")
	        			.attr("value", index).text(str));
					var hiddenVal = $(hidden).val();
    				$(hidden).val(hiddenVal + /*index + ',' + */ str + ',');
				}

				$('#updateChoicesUpdate').unbind('click');
    			$('#updateChoicesCancel').unbind('click');
    			updateChoicesDialog.dialog('close');
    		});
    	}
/*
    	function editChoices(select) {
        	
        	editChoicesDialog.dialog('open');
        	// get the item currently selected
        	var selected = $(select + ' option:selected').text();	

    		// enter the selected string in the text box
    		$('#editChoicesInput').val(selected);

    		// set the Cancel button to close the dialog
    		$('#editChoicesCancel').click(function(){
        		editChoicesDialog.dialog('close');
    		});  		

    		// if Update button is clicked...
    		$('#editChoicesUpdate').click(function(){

        		// build arrays of the current items in the Select box (values and keys), replacing the old selected item with the new one
        		var optionValues = new Array();
        		var optionText = new Array();
        		var index = 0;
        		$(select + ' option').each(function () {
        			optionText[index] = this.text;
        			optionValues[index] = this.value;
        			if (this.text == selected) {
        				optionText[index] = $('#editChoicesInput').val();
        			}
        			index++;
        		});
        		
        		// empty the Select and add the values from our arrays
        		$(select).empty();
        		for (var i = 0; i < index; i++) {
            		var value = optionValues[i];
            		var txt = optionText[i];
        			$(select).append($("<option></option>")
        		     	.attr("value", value).text(txt));
        		}
    			
        		editChoicesDialog.dialog('close');
    		});
        	
    	}*/

    	$(this).submit( function(e){
    		unbindMatrixOfChoicesDialog();
    	});

    	$('#cancel').click( function() {
    		unbindMatrixOfChoicesDialog();
    	});
	}

	function unbindMatrixOfChoicesDialog() {
		$('#updateChoicesRow').unbind('click');
		$('#updateChoicesColumn').unbind('click');
	}

	function setupNewQuestionDialog() {
		$('#cancel').unbind('click');
    	$('#cancel').click( function() {
    		var questionId = $('#hiddenQuestionId').val();
    		window.location = '/owner/question/delete/' + questionId;	
    	});
	}
    
    $(document).ready(function(){
        
		$("#EditDescriptionButton").click(function() {
        	var description = $('#Description').val();
            var surveyId = $('#SurveyId').val();
            //run ajax
            $.post('/owner/survey/updatedescription',
            	{'description' : description, 'surveyId' : surveyId },
                //callback function
                function (response) {
                         
                   	if (response.substr(0,5) == "ERROR") {
                       	alert("Error: " + response.substr(6));
                    } else {
                       	alert("Description updated");
                        $("#Description").val(response);
                    }
                }
            );
                  
        });

		$('.addQuestionButton').click(function() {
            var surveyId = $('#SurveyId').val();
			var page = $(this).siblings('.page')[0];
			var newQuestionIndex = $(this).siblings('.newQuestionIndex')[0];
            //run ajax
            $.get('/owner/question/add', 
            	{ 'surveyId' : surveyId, 
            	  'page' : page.value,
            	  'index' : newQuestionIndex.value },
                  //callback function
                  function (response) {
                           
                     	if (response.substr(0,5) == "ERROR") {
                         	alert("Error: " + response.substr(6));
                      	} else {
							editQuestionDialog.dialog('open');		

                      	editQuestionDialog.html(response);
                      	
                      	setupEditQuestionDialog(surveyId);   
                    	setupNewQuestionDialog();
                      }
                  }
              );

		});

	       
		$('.questionEditButton').click(function() {
			var sib = $(this).siblings('.questionId')[0];
			var questionId = $(sib).val();
            var surveyId = $('#SurveyId').val();
            
			$.post('/owner/question/showedit',
                	{'questionId' : questionId, 'surveyId' : surveyId },
                    //callback function
                    function (response) {
                             
                       	if (response.substr(0,5) == "ERROR") {
                           	alert("Error: " + response.substr(6));
                        } else {
							editQuestionDialog.dialog('open');		

                        	editQuestionDialog.html(response);
                        	
                        	setupEditQuestionDialog(surveyId);  
                        }
                    }
                );
		});

		$('.questionDeleteButton').click(function() {
			var sib = $(this).siblings('.questionId')[0];
			var questionId = $(sib).val();
			if (confirm('Are you sure you want to delete this question?')) {
	            window.location = '/owner/question/delete/' + questionId;			
			}
		});


		$('.questionMoveButton').click(function() {
			moveOrCopy(true, this);
		});
		
		$('.questionCopyButton').click(function() {
			moveOrCopy(false, this);
		});

		function moveOrCopy(move, buttonClass) {
			var actionString;
			var url;
			if (move) {
				actionString = 'Move';
				url = '/owner/question/move/';
			} else {
				actionString = 'Copy';
				url = '/owner/question/copy/';
			}
			
			var sib = $(buttonClass).siblings('.questionId')[0];
			var questionId = $(sib).val();

			// place a "Move Here" button and a "Cancel Move" button adjacent to each "Add Question" button
			// ### in the future, should we not put ones directly adjacent to this question? or is it good to put them there
			// because we know the user will see them there?
			$('button').attr('disabled', 'true').css({ opacity: 0.5 });
			$('<button class="moveHere">' + actionString + ' Here</button><button class="cancelMove">Cancel ' + actionString + '</button><input type="hidden" class="hiddenQuestionIdToMove" value="' + questionId + '" />')
				.insertBefore($('.addQuestionButton'));

			$('.cancelMove').click(function() {
				$('button').removeAttr('disabled').css({ opacity: 1 });
				$('.moveHere').fadeOut('slow');
				$('.cancelMove').fadeOut('slow');
				$('.hiddenQuestionIdToMove').remove();
				
			});

			$('.moveHere').click(function() {
	            var surveyId = $('#SurveyId').val();
	            var questionId = $(this).siblings('.hiddenQuestionIdToMove')[0];
				var page = $(this).siblings('.page')[0];
				var newQuestionIndex = $(this).siblings('.newQuestionIndex')[0];
				
				$('button').removeAttr('disabled').css({ opacity: 1 });
				$('.moveHere').fadeOut('slow');
				$('.cancelMove').fadeOut('slow');
				$('.hiddenQuestionIdToMove').remove();

				window.location = url + surveyId + '/' + questionId.value + '/' + page.value + '/' + newQuestionIndex.value;
	            
			});
		}
   });
</script>


<style type="text/css">
.descriptionTd {
	vertical-align: top;
}


.PageDiv {
	border-width: medium;
 	border-style:ridge;
	padding: 3px;
}

.QuestionDiv {
	border-width: thin;
 	border-style:ridge;
	padding: 3px;
	margin: 3px;
}

.QuestionHeaderTable {
	width: 100%;
}

.matrixOfChoicesTable {
	border-width: 1px;
	border-color: white;
	border-style: solid;
}

.matrixOfChoicesCell {
	padding: 5px;
}

.matrixOfChoicesEvenRow {
	background-color: white;
}

.editQuestionDialog {
	font-size: small;
}


.formLabel {
	font-size: medium;
	vertical-align: top;
}

button {
	background-color:DarkSlateGrey;
	color:LightCyan;
}


</style>

<?php 
$rec = $this->record[0]; 

?>

<input id="SurveyId" type="hidden" value="<?php echo $rec["ID"];?>" />


<h2><?php echo $rec["Name"]; ?></h2>

<table>
	<tr>
		<td class="descriptionTd">Description:</td>
		<td class="descriptionTd"><textarea rows="3" cols="70" id="Description"><?php echo $rec["Description"]; ?></textarea></td>
		<td class="descriptionTd"><button id="EditDescriptionButton">Edit</button></td>
	</tr>
</table>
<br>
<p align='center'><button>Add Page</button></p>

<?php 
for ($i = 1; $i <= count($this->questions); $i++): // go through the pages
	$page = $this->questions[$i]; ?>
	<br><div class="PageDiv"><i>Page <?php echo $i; ?></i>
	<p align='center'>
		<button class='addQuestionButton'>Add Question</button>
		<input type='hidden' class='page' value='<?php echo $i; ?>'></input>
		<input type='hidden' class='newQuestionIndex' value='1'></input>
	</p>
	<?php 
	
	// we must keep a local variable $questionIndex, as distinguished from $question["QuestionIndex"], since the latter will
	// include "questions" that are really just descriptive text
	$questionIndex = 1;
	
	for ($j = 1; $j <= count($page); $j++) :
		$question = $page[$j]; 
				
		$select = $this->selections[$question["ID"]];
		?>
		
		<div class="QuestionDiv">
		<table class='QuestionHeaderTable'>
			<tr>
				<td width='80%'>Question Type: <?php echo $question["CategoryName"]; ?><br></td>
				<td width='20%'>
					<button class='questionEditButton'>Edit</button>
					<button class='questionDeleteButton'>Delete</button> 
					<button class='questionMoveButton'>Move</button>
					<button class='questionCopyButton'>Copy</button>
					<input type='hidden' class='questionId' value='<?php echo $question["ID"]; ?>' />
				</td>
			</tr>
		</table>
		
		<table>
			<?php if ( $question["CategoryName"] != "Descriptive Text"): ?>
			<tr>
				<td><h3><?php echo $questionIndex;?>.</h3></td>
				<td>
				<?php 
					echo html_entity_decode($question["Text"]) . "<br>"; ?>
				</td>
			</tr>
			<?php endif;?>
			<tr>
				<td></td>
				<td>
				<?php 
					
					switch ( $question["CategoryID"] ) {
						case enums_QuestionCategory::Undefined:
							$questionIndex++;
							echo "<b><font color='red'>Need to define this question!</font></b>\n";
							break;
						case enums_QuestionCategory::MultipleChoiceOneAnswer:	
							for ($k = 0; $k < count($select); $k++):
								$s = $select[$k];
								echo "<input type=\"radio\" name=\"QuestionID_" . $question["ID"] . "\" value=\"" . $k . "\">" . html_entity_decode($s["Text"]) . "</input><br>";
							endfor;
							$questionIndex++;
							break;
						case enums_QuestionCategory::MultipleChoiceMultipleAnswers: 
							for ($k = 0; $k < count($select); $k++):
								$s = $select[$k];
								echo "<input type=\"checkbox\" name=\"QuestionID_" . $question["ID"] . "_" . $k  . "\" value=\"" . $k . "\" selection=\"multiple\">" . html_entity_decode($s["Text"]) . "</input><br>";
							endfor;
							$questionIndex++;
							break;	
						case enums_QuestionCategory::CommentEssayBox:
							if ($question["SingleLine"]) {
								echo "<input type='text' size='70'/>";
							} else {
								echo "<textarea rows='3' cols='70'></textarea>"; }
							$questionIndex++;
							break;
						case enums_QuestionCategory::DescriptiveText:		
							echo html_entity_decode($question["Text"]);
							break;
						case enums_QuestionCategory::MatrixOfChoices:			
							// write table headings for the selections
							
							$select = $this->selections[$question["ID"]];?>
							
							<table class='matrixOfChoicesTable'>
								<tr><td class='matrixOfChoicesCell'></td>
								<?php 
								for ($m = 0; $m < count($select); $m++) :
									$s = $select[$m];
									echo "<td class='matrixOfChoicesCell'>" . $s["Text"] . "</td>";
								endfor;?>
								</tr>
								
								<?php
								// find all of the child question IDs and make radio buttons
								for ($k = 0; $k < count($this->childQuestions[$question["ID"]]); $k++):
									$child = $this->childQuestions[$question["ID"]][$k];
									
									$rowClass = "matrixOfChoicesEvenRow";
									if ($k % 2 == 1) {
										$rowClass = "matrixOfChoicesOddRow";
									}
								
									echo "<tr class='" . $rowClass . "'><td class='matrixOfChoicesCell'>" . $child["Text"] . "</td>";
									for ($m = 0; $m < count($select); $m++) :
										$s = $select[$m];
										echo "<td class='matrixOfChoicesCell'><input type='radio' name='QuestionID_" . $child["ID"] . "_" . $k . "'/></td>\n";
									endfor;
								endfor;?>

							</table>
							
							<?php 
							$questionIndex++;
							break;
						
						}
				?>
				
				</td>
			</tr>
			
		</table>
		</div>
		
		<p align='center'>
			<button class='addQuestionButton'>Add Question</button>
			<input type='hidden' class='page' value='<?php echo $i; ?>'></input>
			<input type='hidden' class='newQuestionIndex' value='<?php echo $question['QuestionIndex'] + 1; ?>'></input>
			<?php if ($j < count($page)) {
				echo '<button>Divide Page Here</button>';
			} ?>
		</p>
	
		<?php
		
		
	endfor; // for ($j = 1; $j <= count($page); $j++) :
?>
	</div>
	
<p align='center'><button>Add Page</button></p>

<?php endfor; ?>	

