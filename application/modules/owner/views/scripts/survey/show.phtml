<?php
require_once 'enums.php';

?>


<script type="text/javascript">

QuestionCategory = {
	MultipleChoice : 1,
	CommentEssayBox : 2,
	DescriptiveText : 3,
	MatrixOfChoices : 4,
	MatrixOfChoicesChild : 5,
	Undefined : 999
}

String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
};

var promptDialog = new PromptDialog();

function PromptDialog() {
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// PRIVATE VARIABLES
	////////////////////////////////////////////////////////////////////////////////////////////////////////////		
		
	var _dlg = $('<div id="promptDialog"></div>')
	//.html('<p><span id="prompt"></span></p><p><input type="text" id="promptTextField"/></p><p><input type="submit" value="Okay"/>' + 
	//		'<button id="cancelPromptDialog">Cancel</button></p>')
	.html('<p><input type="text" id="promptTextField" size="70"/></p><p><button id="okayPromptDialog">Okay</button>' + 
			'<button id="cancelPromptDialog">Cancel</button></p>')
	.dialog({
		autoOpen: false,
		//title: 'Edit Question',
		modal: true,
		//width:'auto'
		width: 700,
		//height: window.innerHeight - 50,
		height: 'auto'
	});

	var _this = this;

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//PRIVATE METHODS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	$('#cancelPromptDialog').live('click', function(){
		_dlg.dialog('close');
		_dlg.unbind('submit');
	});

	$('#okayPromptDialog').live('click', function(){
		_dlg.dialog('close');
		_dlg.unbind('submit');
	});
	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//PRIVILEGED METHODS
	////////////////////////////////////////////////////////////////////////////////////////////////////////////


	this.open = function(prompt, textFieldVal, submitFunction) {
		//_dlg.html(html);
		//$('#promptDialog #prompt').html(prompt);
		_dlg.dialog('option', 'title', prompt);
		$('#promptTextField').val(textFieldVal);

		_dlg.dialog('open');

		$('#okayPromptDialog').click(submitFunction);
	}

	
}


var editQDialog = new EditQDialog();

function EditQDialog() {

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRIVATE VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
	var _dlg = $('<div id="editQuestionDialog"></div>')
		.html('<p>Edit Question</p>')
		.dialog({
			autoOpen: false,
			//title: 'Edit Question',
			modal: true,
			//width:'auto'
			width: 700,
			//height: window.innerHeight - 50,
			height: 'auto'
	
	
			/// recommended but it doesn't work:
			/*autoOpen: false,
	        resizable: false,
	        modal: true,
	        width:'auto'*/
		});

	var _questionId = -1;
	var _surveyId = -1;
	var _type = -1;
	var _this = this;
	var _newQuestion = false;

	// this is for the MatrixOfChoices edit dialog
	var _updateChoicesDlg = $('<div id="updateChoicesDialog"></div>')
		.html('<p>Adjust the choices below (one per line)<br/><textarea id="updateChoicesTextArea" rows="10" cols="25"></textarea>' +
		'<br/><button id="updateChoicesUpdate">Update</button><button id="updateChoicesCancel">Cancel</button></p>')
		.dialog({
			autoOpen: false,
			title: 'Update Choices',
			modal: true,
			width:'auto',
			height: 'auto'
		});

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS
////////////////////////////////////////////////////////////////////////////////////////////////////////////
		

	// what if the Question Category changes?
	$('#questionType').live('change', function(){
    	var temp = $('#question').val();
    	$.post('/owner/question/shownewcategory',
            	{'questionId' : _questionId, 'surveyId' : _surveyId, 'newCategory' : $('#questionType').val(), 'description' : $('#question').val() },
                function (response) {
            		if (response.substr(0,5) == "ERROR") {
                       	alert("Error: " + response.substr(6));
                    } else {
						unbind();

                    	_this.setup(_surveyId, response, _newQuestion);	// call _dlg.html(response); here
                    }
                }
		)
	});



	$('#cancel').live('click', function(e) {
		e.preventDefault();	// prevents submit
		unbind();
		_dlg.dialog('close');
	});

	// the "Save/Close" submit button
	$('#save').live('click', function(e) {
		$('#hiddenCloseDlg').val(1);
		//$.cookie('scrollToQuestionId', _questionId);
		$.cookie('scrollToPos', $(document).scrollTop());
		if (!validate()) {
			e.preventDefault();	// prevents submit
			return;
		}
		else {
    		unbind();
		}
	});

	// the "Save/Next Question" submit button
	$('#saveNextQuestionButton').live('click', function(e) {
		e.preventDefault();	// prevents submit
		$('#hiddenCloseDlg').val(0);
		var temp = $(_dlg).find('form');
		var data = $(_dlg).find('form').serialize();
		if (!validate()) {
			return;
		}
		else {
    		unbind();
		}
		$.post('/owner/question/save/' + _questionId, data,
                //callback function
                function (response) {
                	if (response.substr(0,5) == "ERROR") {
                    	alert("Error: " + response.substr(6));
                    } else {
                        unbind();
						_this.setupNew(_surveyId, response);
                    }
                }
            );
	});

	// validate user input on submit
	function validate() {
    	if ($('#questionType').val() == -1) {
        	alert('Please select a Question type first');
        	return false;
    	}
    	if ($('#question').val() == '') {
        	alert('Please enter a description for the Question first');
        	return false;
    	}

    	return true;
	}

	function unbind() {
		$('#questionType').unbind('change');
		$(_dlg).unbind('submit');
		$('#cancel').unbind('click');

		switch (_type) { 
		case QuestionCategory.MultipleChoice:
			unbindMultipleChoice();
			break;
		case QuestionCategory.CommentEssayBox:
			unbindEssayBox();
			break;
		case QuestionCategory.DescriptiveText:
			unbindDescriptiveText();
			break;
		case QuestionCategory.MatrixOfChoices:
			unbindMatrixOfChoices();
			break;
		}
	}
		

	function setupSelection(element, index){
		var letterA = 'a';
		var selectionLetter = String.fromCharCode(letterA.charCodeAt(0) + index - 1);
		
		$(element).prev()
			.attr('for', 'selection-' + index)
			.html(selectionLetter + '.');
		$(element)
			.attr('name', 'selection[' + index + ']')
			.attr('id', 'selection-' + index);
	}

	function setupMultipleChoice(){
		$('#fieldset-selection').append('<button id="addSelectionButton">Add</button>');

		$('#fieldset-selection p').append('<button class="deleteSelectionButton">Delete</button>');

		$('button').css({'font-size': 'small'});
		
		$('#addSelectionButton').click(function(event) {
	    	event.preventDefault();
	    	var selectionIndex = $('.selection').size() + 1;
			
	    	var currentLast = $('.selection:last').closest('p');
			var newP = currentLast.clone();
			
			$(newP).hide();
			$(newP).fadeIn('slow');
			currentLast.after(newP);
			
			setupSelection('.selection:last', selectionIndex);
			$('.selection:last').val('');
		});
		
		$('.deleteSelectionButton').live('click', function(event) {
	    	event.preventDefault();

	    	// remove all html within and including the <p></p> tags
			var parent = $(this).parent('p');
			$(this).parent('p').fadeOut('slow');
			$(this).parent('p').remove();

			$('#fieldset-selection .selection').each(function(index) {
				setupSelection(this, index + 1);
				index++;
			});
	    	
		});

		if ($('#otherField').attr('checked') != "checked") {
			$('#otherFieldSize').attr('disabled', 'disabled');
		}

		$('#otherField').click(function(){
			if ($('#otherField').attr('checked') != "checked") {
	    		$('#otherFieldSize').attr('disabled', 'disabled');
	    	} else {
	    		$('#otherFieldSize').removeAttr('disabled');
	    	}
		});

		$(_dlg).submit(function(e) {
			// make sure user has entered at least one selection
			var selectionEntered = false;

			$('#fieldset-selection .selection').each(function(index) {
				var selection = $(this).val().trim();
				if (selection != '') {
					selectionEntered = true;
				}
			});
			
			if (!selectionEntered) {
				alert('Please enter at least one selection');
				e.preventDefault();
				return;
			}

		});

	}

	function unbindMultipleChoice() {
		$('#addSelectionButton').unbind('click');
		$('.deleteSelectionButton').unbind('click');
		$('#otherField').unbind('click');
	}


	function setupEssayBox(){
	}
	function unbindEssayBox(){
	}

	function setupDescriptiveText(){
	}
	function unbindDescriptiveText(){
	}

	function setupMatrixOfChoices(){
    	//$('#editRow').css({'font-size': 'small'});
    	$('#updateChoicesRow').css({'font-size': 'small'});
    	//$('#editColumn').css({'font-size': 'small'});
    	$('#updateChoicesColumn').css({'font-size': 'small'});
    	
    	
    	$('#updateChoicesRow').click(function() {
        	updateChoices('#rowChoices', '#hiddenRowChoices');
    	});
    	$('#updateChoicesColumn').click(function() {
        	updateChoices('#columnChoices', '#hiddenColumnChoices');
    	});

    	function updateChoices(select, hidden) {
			_updateChoicesDlg.dialog('open');
			$('#updateChoicesTextArea').val('');
			
			// enter the current choices in the text area
			$(select + ' option').each(function () {
				var newText = $('#updateChoicesTextArea').val() + this.text + '\n';
				$('#updateChoicesTextArea').val(newText);
			}); 
			
    		// set the Cancel button to close the dialog
    		$('#updateChoicesCancel').click(function(){
    			$('#updateChoicesUpdate').unbind('click');
    			$('#updateChoicesCancel').unbind('click');
    			_updateChoicesDlg.dialog('close');
    		});  		
    		
    		// if Update button is clicked...
    		$('#updateChoicesUpdate').click(function(){
				
				// empty the Select and the hidden tag
        		$(select).empty();
        		$(hidden).val('');

        		// separate the text area by line feed to get each option and add it to the select  		
				var str = $('#updateChoicesTextArea').val();
        		
				var i = str.indexOf('\n');
				var index = 1;
				while (i != -1) {
					var val = str.substr(0, i);
					$.trim(val);
					if (val != '') {
						$(select).append($("<option></option>")
	        				.attr("value", index).text(val));
        				var hiddenVal = $(hidden).val();
        				$(hidden).val(hiddenVal + /*index + ',' + */ val + ',');
					}
    		     	
					if (i == str.length - 1) {
						str = '';
						break;
					}
					str = str.substr(i + 1);
					i = str.indexOf('\n');
					index++;
				}
				// if there's anything remaining, add it to the select as well
				$.trim(str);
				if (str != '') {
					$(select).append($("<option></option>")
	        			.attr("value", index).text(str));
					var hiddenVal = $(hidden).val();
    				$(hidden).val(hiddenVal + /*index + ',' + */ str + ',');
				}

				$('#updateChoicesUpdate').unbind('click');
    			$('#updateChoicesCancel').unbind('click');
    			_updateChoicesDlg.dialog('close');
    		});
    	}
	}

	function unbindMatrixOfChoices() {
		$('#updateChoicesRow').unbind('click');
		$('#updateChoicesColumn').unbind('click');
	}

	function setMainCSS() {
		$('.zendFormElement').css({'font-size': 'medium', 'margin': '1px'});
		$('button').css({'font-size': 'small'});
		$('#save').css({'font-size': 'small'});
		$('#saveNextQuestion').css({'font-size': 'small'});
	}

	function setDialogPositionAndSize() {

		// fix the height of the dialog: if the dialog's too big, make sure it doesn't extend too far down
		var dialogHeight = parseInt($(_dlg).css('height'), 10);
		if (dialogHeight > window.innerHeight - 50) {
	    	_dlg.dialog('option', 'height', window.innerHeight - 50);
		} else {
			_dlg.dialog('option', 'height', 'auto');
	    	dialogHeight = parseInt($(_dlg).css('height'), 10);
	    	if (dialogHeight > window.innerHeight - 50) {
	    		_dlg.dialog('option', 'height', window.innerHeight - 50);
	    	}
		}

		_dlg.dialog('option', 'position','top');   

	}
    

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRIVILEGED METHODS
////////////////////////////////////////////////////////////////////////////////////////////////////////////


	this.setup = function(surveyId, text, newQuestion) {

		_surveyId = surveyId;
		_dlg.dialog('open');
		_dlg.html(text);
		_newQuestion = newQuestion;


		if (_newQuestion) {
			this.setupNew(surveyId, text);
		}
		
		// add callbacks here
		_type = parseInt($('#questionType').val());
		switch(_type) {
		case QuestionCategory.MultipleChoice:
			setupMultipleChoice();
			break;
		case QuestionCategory.CommentEssayBox:
			setupEssayBox();
			break;
		case QuestionCategory.DescriptiveText:
			setupDescriptiveText();
			break;
		case QuestionCategory.MatrixOfChoices:
			setupMatrixOfChoices();
			break;
		}
		

		_questionId = $('#hiddenQuestionId').val();

		// fix the height of the dialog: if the dialog's too big, make sure it doesn't extend too far down
		setDialogPositionAndSize();

		// set css for the elements in the form
		setMainCSS();
		
	}



	this.setupNew = function(surveyId, text) {
		_surveyId = surveyId;
		_dlg.dialog('open');
		_dlg.html(text);
		_type = QuestionCategory.Unknown;
		_newQuestion = true;

		// create a new "Save/Next Question" button
		var submitButton = $(_dlg).find('#save')[0];
		$(submitButton).after('<button id="saveNextQuestionButton">Save/Next Question</button>');
		
		_questionId = $('#hiddenQuestionId').val();
		
    	$('#cancel').click( function() {
    		var questionId = $('#hiddenQuestionId').val();
    		$.get('/owner/question/delete/' + questionId + '/0');	
    	});

    	setDialogPositionAndSize();

		// set css for the elements in the form
		setMainCSS();

	}
}



/*
	function fitToScreen(dialog) {
		var extra = 40;
		var dWidth = $(dialog).width();
		var dHeight = $(dialog).height();
		if (this.width - extra < dWidth) {
			$(dialog).css('width', this.width - extra);
		}
		if (this.height - extra < dHeight) {
			$(dialog).css('height', this.height - extra);
		}
	}*/

	$(window).load(function(){
		// scroll to the question we were editing...(if we were editing one)
    	/*if ($.cookie('scrollToQuestionId') != null) {
			var questionId = $.cookie('scrollToQuestionId');
			// find the hidden question ID with this value
			var question = $('.questionId[value=' + questionId + ']');
			if (question.length > 0) {
				var pos = $(question).closest('.QuestionDiv').offset().top;
				$('html, body').animate({scrollTop:pos}, 'fast');
				$.cookie('scrollToQuestionId', null); // clear the cookie
			}
        }*/

        if ($.cookie('scrollToPos') != null) {
            var pos = $.cookie('scrollToPos');
        	$('html, body').animate({scrollTop:pos}, 'fast');
        	// clear the cookie
        	$.cookie('scrollToPos', null);
        }
        else if ($.cookie('scrollToPageIndex') != null && $.cookie('scrollToQuestionIndex') != null) {
            var pageIndex = $.cookie('scrollToPageIndex');
            var questionIndex = $.cookie('scrollToQuestionIndex');
            var question = $('.page[value=' + pageIndex + ']').closest('.PageDiv').find('.questionItemIndex[value=' + questionIndex + ']');
			if (question.length > 0) {
				var pos = $(question).closest('.QuestionDiv').offset().top;
				$('html, body').animate({scrollTop:pos}, 'fast');
				// clear the cookies
				$.cookie('scrollToPageIndex', null); 
				$.cookie('scrollToQuestionIndex', null); 
			}
        }
        else {
        	$('html, body').animate({scrollTop:0}, 'fast');
        }
	});
    
    $(document).ready(function(){

        
		$("#EditDescriptionButton").click(function() {
        	var description = $('#Description').val();
            var surveyId = $('#SurveyId').val();
            //run ajax
            $.post('/owner/survey/updatedescription',
            	{'description' : description, 'surveyId' : surveyId },
                //callback function
                function (response) {
                         
                   	if (response.substr(0,5) == "ERROR") {
                       	alert("Error: " + response.substr(6));
                    } else {
                       	alert("Description updated");
                        $("#Description").val(response);
                    }
                }
            );
                  
        });

        $('.pageNameEditButton').click(function() {
            // is there currently a name? If so, populate it in the prompt
            var currentName = '';
            if ($(this).siblings('.pageName').length > 0) {
				currentName = $(this).siblings('.pageName')[0].innerHTML;
            }

            promptDialog._pageIndex = $(this).siblings('.page')[0].value;
            PromptDialog.prototype._PageName = $(this).siblings('.pageName')[0];
                
			promptDialog.open('What would you like to set the name to?', currentName, 
				function() {
		            var surveyId = $('#SurveyId').val();		            
		            var pageName = $('#promptTextField').val();
					//window.location = '/owner/survey/editpagename/' + surveyId + '/' + promptDialog._pageIndex + '/"' + pageName + '"';
					$.get('/owner/survey/editpagename/' + surveyId + '/' + promptDialog._pageIndex + '/"' + pageName + '"', {},
						function (response) {
                        
                       	if (response.substr(0,5) == "ERROR") {
                           	alert("Error: " + response.substr(6));
                        } else {
                        	PromptDialog.prototype._PageName.innerHTML = response;                        }
                    }
              );
				}
			);
        });

		$('.pageAddButton').click(function() {
			var newPageIndex = $(this).siblings('.page')[0];
            var surveyId = $('#SurveyId').val();
            $.cookie('scrollToPos', $(document).scrollTop());
			window.location = '/owner/survey/addpage/' + surveyId + '/' + newPageIndex.value;
		});

		$('.pageDeleteButton').click(function() {
			var pageIndex = $(this).siblings('.page')[0];
            var surveyId = $('#SurveyId').val();

			if (confirm('Are you sure you want to delete this page and all of the questions in it? This action cannot be undone.')) {
				$.cookie('scrollToPos', $(document).scrollTop());
				window.location = '/owner/survey/deletepage/' + surveyId + '/' + pageIndex.value;
			}
		});



		$('.pageMoveButton').click(function() {
			moveOrCopyPage(true, this);
		});
		
		$('.pageCopyButton').click(function() {
			moveOrCopyPage(false, this);
		});

		function moveOrCopyPage(move, buttonClass) {
			var actionString;
			var url;
			if (move) {
				actionString = 'Move';
				url = '/owner/survey/movepage/';
			} else {
				actionString = 'Copy';
				url = '/owner/survey/copypage/';
			}
			
			var sib = $(buttonClass).siblings('.page')[0];
			var page = $(sib).val();

			// place a "Move Here" (or "Copy Here") button and a "Cancel Move" (or "Cancel Copy") button adjacent to each "Add Page" button
			$('button').attr('disabled', 'true').css({ opacity: 0.5 });
			$('<button class="moveHere">' + actionString + ' Here</button><button class="cancelMove">Cancel ' + actionString + '</button>' +
					'<input type="hidden" class="move" value="' + move + '" />' +
					'<input type="hidden" class="hiddenPageToMove" value="' + page + '" />')
				.insertBefore($('.pageAddButton'));

			$('.cancelMove').click(function() {
				$('button').removeAttr('disabled').css({ opacity: 1 });
				$('.moveHere').fadeOut('slow');
				$('.cancelMove').fadeOut('slow');
				$('.hiddenPageToMove').remove();
				
			});

			$('.moveHere').click(function() {
	            var surveyId = $('#SurveyId').val();
	            var move = $(this).siblings('.move')[0].value;
	            var origPageIndex = $(this).siblings('.hiddenPageToMove')[0];
				var newPageIndex = $(this).siblings('.page')[0];

				// reenable all the buttons
				$('button').removeAttr('disabled').css({ opacity: 1 });
				// remove the temporary Copy and Move buttons
				$('.moveHere').fadeOut('slow');
				$('.cancelMove').fadeOut('slow');
				$('.hiddenPageToMove').remove();


				// add cookies to remember the page number so that when the page reloads, we can automatically scroll to that location
				
				// special exception: if we are moving a page from a smaller index to a larger index, then the "actual" newPageIndex
				// is one less
				if (move == 'true' && origPageIndex.value < newPageIndex.value) {
					$.cookie('scrollToPageIndex', newPageIndex.value - 1);
				} else {					
					$.cookie('scrollToPageIndex', newPageIndex.value);
				}
				$.cookie('scrollToQuestionIndex', 1);
				
				window.location = url + surveyId + '/' + origPageIndex.value + '/' + newPageIndex.value;
	            
			});
		}

		$('.dividePageButton').click(function() {
            var surveyId = $('#SurveyId').val();
			var page = $(this).siblings('.page')[0].value;
			var questionIndex = $(this).siblings('.newQuestionIndex')[0].value;
            window.location = '/owner/survey/dividepage/' + surveyId + '/' + page + '/' + questionIndex;
		});

		$('.questionAddButton').click(function() {
            var surveyId = $('#SurveyId').val();
			var page = $(this).siblings('.page')[0];
			var newQuestionIndex = $(this).siblings('.newQuestionIndex')[0];
            //run ajax
            $.get('/owner/question/add', 
            	{ 'surveyId' : surveyId, 
            	  'page' : page.value,
            	  'index' : newQuestionIndex.value },
                  //callback function
                  function (response) {
                             
                       	if (response.substr(0,5) == "ERROR") {
                           	alert("Error: " + response.substr(6));
                        } else {
							editQDialog.setupNew(surveyId, response);
                        }
                    }
              );

		});

	       
		$('.questionEditButton').click(function() {
			var sib = $(this).siblings('.questionId')[0];
			var questionId = $(sib).val();
            var surveyId = $('#SurveyId').val();
            
			$.post('/owner/question/showedit',
                	{'questionId' : questionId, 'surveyId' : surveyId },
                    //callback function
                    function (response) {
                             
                       	if (response.substr(0,5) == "ERROR") {
                           	alert("Error: " + response.substr(6));
                        } else {
							editQDialog.setup(surveyId, response, false);
                        }
                    }
                );
		});

		$('.questionDeleteButton').click(function() {
			var sib = $(this).siblings('.questionId')[0];
			var questionId = $(sib).val();
			if (confirm('Are you sure you want to delete this question?')) {
				$.cookie('scrollToPos', $(document).scrollTop());
	            window.location = '/owner/question/delete/' + questionId + '/1';			
			}
		});


		$('.questionMoveButton').click(function() {
			moveOrCopyQuestion(true, this);
		});
		
		$('.questionCopyButton').click(function() {
			moveOrCopyQuestion(false, this);
		});

		function moveOrCopyQuestion(move, buttonClass) {
			var actionString;
			var url;
			if (move) {
				actionString = 'Move';
				url = '/owner/question/move/';
			} else {
				actionString = 'Copy';
				url = '/owner/question/copy/';
			}
			
			var sib = $(buttonClass).siblings('.questionId')[0];
			var questionId = $(sib).val();

			// place a "Move Here" (or "Copy Here") button and a "Cancel Move" (or "Cancel Copy") button adjacent to each "Add Question" button
			// ### in the future, should we not put ones directly adjacent to this question? or is it good to put them there
			// because we know the user will see them there?
			$('button').attr('disabled', 'true').css({ opacity: 0.5 });
			$('<button class="moveHere">' + actionString + ' Here</button><button class="cancelMove">Cancel ' + actionString + '</button>' +
					'<input type="hidden" class="move" value="' + move + '" />' +
					'<input type="hidden" class="hiddenQuestionIdToMove" value="' + questionId + '" />')
				.insertBefore($('.questionAddButton'));

			$('.cancelMove').click(function() {
				$('button').removeAttr('disabled').css({ opacity: 1 });
				$('.moveHere').fadeOut('slow');
				$('.cancelMove').fadeOut('slow');
				$('.hiddenQuestionIdToMove').remove();
				
			});

			$('.moveHere').click(function() {
	            var surveyId = $('#SurveyId').val();
	            var questionId = $(this).siblings('.hiddenQuestionIdToMove')[0];
				var origPageIndex = $('.questionId[value=' + questionId.value + ']').closest('.PageDiv').find('.page')[0].value;
				var origQuestionIndex = $('.questionId[value=' + questionId.value + ']').next('.questionItemIndex')[0].value;
	            
				var newPageIndex = $(this).siblings('.page')[0].value;
				var newQuestionIndex = $(this).siblings('.newQuestionIndex')[0].value;

				var move = $(this).siblings('.move')[0].value;
				
				$('button').removeAttr('disabled').css({ opacity: 1 });
				$('.moveHere').fadeOut('slow');
				$('.cancelMove').fadeOut('slow');
				$('.hiddenQuestionIdToMove').remove();

				// add cookies to remember the page number and new question index so that when the page reloads, we can automatically scroll to that location
				$.cookie('scrollToPageIndex', newPageIndex);
				$.cookie('scrollToQuestionIndex', newQuestionIndex);

				// special exception: if we are moving a question from a smaller index to a larger index within the same page, then the "actual" newQuestionIndex
				// is one less
				if (move == 'true' && origPageIndex == newPageIndex && origQuestionIndex < newQuestionIndex) {
					$.cookie('scrollToQuestionIndex', newQuestionIndex - 1);
				}

				window.location = url + surveyId + '/' + questionId.value + '/' + newPageIndex + '/' + newQuestionIndex;
	            
			});
		}
   });
</script>


<style type="text/css">


td {
	padding: 5px;
}

.descriptionTd {
	vertical-align: top;
}


.PageDiv {
	border-width: medium;
 	border-style:ridge;
	padding: 3px;
}

.QuestionDiv {
	border-width: thin;
 	border-style:ridge;
	padding: 3px;
	margin: 3px;
}

.QuestionHeaderTable {
	width: 100%;
}

.matrixOfChoicesTable {
	border-width: 1px;
	border-color: white;
	border-style: solid;
}

.matrixOfChoicesCell {
	padding: 5px;
}

.matrixOfChoicesEvenRow {
	background-color: white;
}

.editQuestionDialog {
	font-size: small;
}


.formLabel {
	font-size: medium;
	vertical-align: top;
}
/*
button {
	background-color:DarkSlateGrey;
	color:LightCyan;
}*/

.pageName {
	color:DarkSlateGrey;
	font-weight:bold;
}


</style>

<?php 
$survey = $this->survey; 

?>

<input id="SurveyId" type="hidden" value="<?php echo $survey["ID"];?>" />


<h2><?php echo $survey["Name"]; ?></h2>
<table>
	<tr>
		<td class="descriptionTd">Description:</td>
		<td class="descriptionTd"><textarea rows="3" cols="70" id="Description"><?php echo $survey["Description"]; ?></textarea></td>
		<td class="descriptionTd"><button id="EditDescriptionButton">Edit</button></td>
	</tr>
</table>
<br>
<p align='center'><button class='pageAddButton'>Add Page</button>
<input type='hidden' class='page' value='1'></input></p>

<?php 
for ($i = 1; $i <= $survey['NumPages']; $i++): // go through the pages
	$page = $this->questions[$i]; ?>
	<br><div class="PageDiv"><i>Page <?php echo $i; ?>&nbsp;&nbsp;&nbsp;&nbsp;</i>
		<?php 
		if ($this->pages[$i] != '') { 
			echo '<span class="pageName">' . $this->pages[$i] . '</span>&nbsp;&nbsp;&nbsp;&nbsp;' .
				'<button class="pageNameEditButton">Edit Name</button>';
		} else {
			echo '<button class="pageNameEditButton">Add Name</button>'; 
		}
		?>
		<button class='pageDeleteButton'>Delete</button> 
		<button class='pageMoveButton'>Move</button>
		<button class='pageCopyButton'>Copy</button>
		<input type='hidden' class='page' value='<?php echo $i; ?>'></input>
	<p align='center'>
		<button class='questionAddButton'>Add Question</button>
		<input type='hidden' class='page' value='<?php echo $i; ?>'></input>		
		<input type='hidden' class='newQuestionIndex' value='1'></input>
	</p>
	<?php 
	
	// we must keep a local variable $questionIndex, as distinguished from $question["QuestionIndex"], since the latter will
	// include "questions" that are really just descriptive text
	$questionIndex = 1;
	
	for ($j = 1; $j <= count($page); $j++) :
		$question = $page[$j]; 
				
		$select = $this->selections[$question["ID"]];
		?>
		
		<div class="QuestionDiv">
		<table class='QuestionHeaderTable'>
			<tr>
				<td>Question Type: <?php echo $question["CategoryName"]; ?><br></td>
				<td>
					<button class='questionEditButton' style='float:right'>Edit</button>
					<button class='questionDeleteButton' style='float:right'>Delete</button> 
					<button class='questionMoveButton' style='float:right'>Move</button>
					<button class='questionCopyButton' style='float:right'>Copy</button>
					<input type='hidden' class='questionId' value='<?php echo $question["ID"]; ?>' />
					<input type='hidden' class='questionItemIndex' value='<?php echo $j;?>' />
				</td>
			</tr>
		</table>
		
		<table>
			<?php if ( $question["CategoryName"] != "Descriptive Text"): ?>
			<tr>
				<td><h3><?php echo $questionIndex;?>.</h3></td>
				<td>
				<?php 
					echo html_entity_decode($question["Text"]) . "<br>"; ?>
				</td>
			</tr>
			<?php endif;?>
			<tr>
				<td></td>
				<td>
				<?php 
					
					switch ( $question["CategoryID"] ) {
						case enums_QuestionCategory::Undefined:
							$questionIndex++;
							echo "<b><font color='red'>Need to define this question!</font></b>\n";
							break;
						case enums_QuestionCategory::MultipleChoice:	
							for ($k = 0; $k < count($select); $k++):
								$s = $select[$k];
								// if user can make multiple selections, checkboxes should be used; otherwise radio buttons
								if ($question["MultipleSelections"]) {
									echo "<input type=\"checkbox\" name=\"QuestionID_" . $question["ID"] . "_" . $k  . "\" value=\"" . $k . "\" selection=\"multiple\">" . html_entity_decode($s["Text"]) . "</input><br>";
								} else {
									echo "<input type=\"radio\" name=\"QuestionID_" . $question["ID"] . "\" value=\"" . $k . "\">" . html_entity_decode($s["Text"]) . "</input><br>";
								}
							endfor;

							// if user can select an "other" field, show it here
							if ($question["AddOtherField"]) {
								echo "<br>Other (please specify):<br>";
								if ($question["mSingleLine"]) {
									// display one line text box
									echo "<input type='text' size='70'/>";
								} else {
									echo "<textarea rows='3' cols='70'></textarea>";
								}
							}
								
							$questionIndex++;
							break;
						
						case enums_QuestionCategory::CommentEssayBox:
							if ($question["SingleLine"]) {
								echo "<input type='text' size='70'/>";
							} else {
								echo "<textarea rows='3' cols='70'></textarea>"; }
							$questionIndex++;
							break;
						case enums_QuestionCategory::DescriptiveText:		
							echo html_entity_decode($question["Text"]);
							break;
						case enums_QuestionCategory::MatrixOfChoices:			
							// write table headings for the selections
							
							$select = $this->selections[$question["ID"]];?>
							
							<table class='matrixOfChoicesTable'>
								<tr><td class='matrixOfChoicesCell'></td>
								<?php 
								for ($m = 0; $m < count($select); $m++) :
									$s = $select[$m];
									echo "<td class='matrixOfChoicesCell'>" . $s["Text"] . "</td>";
								endfor;?>
								</tr>
								
								<?php
								// find all of the child question IDs and make radio buttons
								for ($k = 0; $k < count($this->childQuestions[$question["ID"]]); $k++):
									$child = $this->childQuestions[$question["ID"]][$k];
									
									$rowClass = "matrixOfChoicesEvenRow";
									if ($k % 2 == 1) {
										$rowClass = "matrixOfChoicesOddRow";
									}
								
									echo "<tr class='" . $rowClass . "'><td class='matrixOfChoicesCell'>" . $child["Text"] . "</td>";
									for ($m = 0; $m < count($select); $m++) :
										$s = $select[$m];
										echo "<td class='matrixOfChoicesCell'><input type='radio' name='QuestionID_" . $child["ID"] . "_" . $k . "'/></td>\n";
									endfor;
								endfor;?>

							</table>
							
							<?php 
							$questionIndex++;
							break;
						
						}
				?>
				
				</td>
			</tr>
			
		</table>
		</div>
		
		<p align='center'>
			<button class='questionAddButton'>Add Question</button>
			<input type='hidden' class='page' value='<?php echo $i; ?>'></input>
			<input type='hidden' class='newQuestionIndex' value='<?php echo $question['QuestionIndex'] + 1; ?>'></input>
			<?php if ($j < count($page)) {
				echo '<button class="dividePageButton">Divide Page Here</button>';
			} ?>
		</p>
	
		<?php
		
		
	endfor; // for ($j = 1; $j <= count($page); $j++) :
?>
	</div>
	
<p align='center'><button class='pageAddButton'>Add Page</button><input type='hidden' class='page' value='<?php echo ($i + 1); ?>'></p>

<?php endfor; ?>	
